#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

int nThreads;
int n1, n2, qtdEquipe, qtdMembro;
int array[10000000][2];
pthread_mutex_t mymutex;

int mdc (int n1, int n2){
    int  resto;
     resto = n1%n2;
       
   while(resto!=0)
   {
      n1    = n2;
      n2    = resto;
      resto = n1%n2;        
   }
   return  n2;
}

void * aux (void * arg){
	int id = (int) arg;

	pthread_mutex_lock(&mymutex); 
	 
	int k, result = 0;	  
   for(k = id; k < (qtdEquipe*qtdMembro); k+=qtdMembro)
   {	
		result += mdc (array[k][1], array[k][2]);
   }
	id++;
	printf("%dÂº turno: %d\n", id, result);
	pthread_mutex_unlock(&mymutex); 
}

int main (int argc, char **argv){
   
   int result, i, k;
	//memset(array,0,sizeof array*2);
   
   scanf ("%d %d", &qtdEquipe, &qtdMembro);
   nThreads = qtdMembro;
   pthread_t thread[nThreads]; 
   
      
   for (i = 0;i < qtdEquipe*qtdMembro;i++) 
   { 
         scanf("%d %d", &array[i][1], &array[i][2]); 
   }
	
	pthread_mutex_init(&mymutex, NULL);

   for(i=0; i<nThreads; i++) {
        pthread_create(&thread[i], NULL, aux, (void*) i);
    }
    for(i=0; i<nThreads; i++) {
        pthread_join(thread[i], NULL);
    }
      
    pthread_exit(NULL);

   return 0;
}
