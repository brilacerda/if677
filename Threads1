#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

/*
Testes de tempo com números de Threads diferentes.

senha: 3465926403
#threads 10
real	0m5.406s

senha: 3465926403
#threads 1
real	0m21.7566s

senha: 3465926403
#threads 4
real	0m5.577s

senha: 3465926403
#threads 8
real	0m5.179s
*/

char password[11] = "3465926403";
long size = 10000000000;
long senhaInt = 0;
long resDiv = 0;
#define nThreads 8
pthread_t thread[nThreads];
long limit;


void * f (void *arg)
{
	long numT = (long) arg;
	long j;
	long inf = resDiv*numT;
	long sup = inf + resDiv-1;

	if(numT==9){
		sup = 9999999999;
	}

	for (j = inf; (j < sup); j++)
	{
		if (senhaInt == j){
		printf ("YAY! A Thread %ld encontrou a senha %ld \n", numT, j);
		}
	}
}

char transformIntToChar(int val)
{
	val = val + 48;
	return (0 + val);
}
	//eleva as coisas
	long power (int pow)
	{
		int j;
		if (pow == 0)
		{
			return 1;
		} else {
			long result = 1;

		for (j = 0; j < pow; j++)
		{
			result = result * 10;
		}

	return result;
	}
}

long transformPassWordToInt (){
	long i;

	for (i = 0; i < 11; i++)
	{
		if(i != 10){
			senhaInt = senhaInt + ((int) password[i] - 48)*(power (10-i));
		}
	}
	senhaInt = senhaInt/10; //por conta do numero extra alocado por c
	//C é muito looooooouco pqp pqp pqp pqp pqp pqp
}

void criaThreads (){
	
	long i;
	for (i = 0; i < nThreads; i++)
	{
		pthread_create(&thread[i], NULL, *f, (void *) i);
	}

	for (i = 0; i < nThreads; i++)
	{
		pthread_join(thread[i], NULL);
	}
}

int main()
{
	int i;

	resDiv = (size/nThreads) -1;

	transformPassWordToInt();

	criaThreads();

	pthread_exit(NULL);

	return 0;
}

//#48-57 == 0-9 em ascii
